# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H7HDrAdgXiKI49enWBj15n8wbev_xQ_s
"""

# Install required libraries if not already installed
!pip install dash pandas plotly

# Import libraries
from dash import Dash, dcc, html
from dash.dependencies import Input, Output
import pandas as pd
import plotly.express as px
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# Load data
menu = pd.read_csv("/content/starbucks-menu-nutrition-drinks.csv")
directory = pd.read_csv("/content/directory.csv")
portfolio = pd.read_csv("/content/portfolio.csv")

# Handle missing columns and preprocessing
try:
    # Ensure 'cluster' column exists in the portfolio dataset
    if 'cluster' not in portfolio.columns:
        scaler = StandardScaler()
        scaled_data = scaler.fit_transform(portfolio[['reward', 'difficulty', 'duration']])
        kmeans = KMeans(n_clusters=3, random_state=42)
        portfolio['cluster'] = kmeans.fit_predict(scaled_data)

    # Ensure menu data is numeric
    menu['Calories'] = pd.to_numeric(menu['Calories'], errors='coerce')
    menu['Calories'].fillna(0, inplace=True)

    # Ensure directory data has 'latitude' and 'longitude'
    if 'latitude' not in directory.columns or 'longitude' not in directory.columns:
        directory['latitude'].fillna(directory['latitude'].mean(), inplace=True)
        directory['longitude'].fillna(directory['longitude'].mean(), inplace=True)

except Exception as e:
    print("Error during preprocessing:", e)

# Initialize Dash app
app = Dash(__name__)

# App layout
app.layout = html.Div([
    dcc.Tabs([
        # Tab 1: Customer Segmentation
        dcc.Tab(label='Customer Segmentation', children=[
            html.H2("Customer Segmentation Analysis"),
            dcc.Graph(id='segmentation-scatter'),
            dcc.Dropdown(
                id='cluster-dropdown',
                options=[{'label': f'Cluster {i}', 'value': i} for i in portfolio['cluster'].unique()],
                value=portfolio['cluster'].unique()[0]
            ),
        ]),

        # Tab 2: Menu Optimization
        dcc.Tab(label='Menu Optimization', children=[
            html.H2("Menu Optimization Insights"),
            dcc.Graph(id='calorie-distribution'),
            dcc.RangeSlider(
                id='calorie-slider',
                min=menu['Calories'].min(),
                max=menu['Calories'].max(),
                step=10,
                marks={i: str(i) for i in range(0, int(menu['Calories'].max()) + 1, 100)},
                value=[menu['Calories'].min(), menu['Calories'].mean()]
            ),
        ]),

        # Tab 3: Store Location Optimization
        dcc.Tab(label='Store Location Optimization', children=[
    html.H2("Store Location Insights"),
    html.P("Store Heatmap:"),
    html.Button("Update Heatmap", id="heatmap-button", n_clicks=0),
    dcc.Graph(id='location-heatmap'),
])
    ])
])

# Callbacks for interactivity
@app.callback(
    Output('segmentation-scatter', 'figure'),
    [Input('cluster-dropdown', 'value')]
)
def update_segmentation_scatter(selected_cluster):
    filtered_data = portfolio[portfolio['cluster'] == selected_cluster]
    fig = px.scatter(filtered_data, x='reward', y='difficulty', color='cluster', size='duration',
                     title="Customer Segmentation Scatter Plot")
    return fig

@app.callback(
    Output('calorie-distribution', 'figure'),
    [Input('calorie-slider', 'value')]
)
def update_calorie_distribution(calorie_range):
    filtered_data = menu[(menu['Calories'] >= calorie_range[0]) & (menu['Calories'] <= calorie_range[1])]
    fig = px.histogram(filtered_data, x='Calories', nbins=20, title="Calorie Distribution")
    return fig

@app.callback(
    Output('location-heatmap', 'figure'),
    [Input('heatmap-button', 'n_clicks')]
)
def update_location_heatmap(n_clicks):
    print("Heatmap callback triggered")  # For debugging purposes
    fig = px.density_mapbox(
        directory,
        lat='latitude',
        lon='longitude',
        radius=10,
        mapbox_style="stamen-terrain",
        title="Store Location Heatmap",
        center={"lat": directory['latitude'].mean(), "lon": directory['longitude'].mean()},
        zoom=2
    )
    return fig

# Run the Dash app
if __name__ == '__main__':
    app.run_server(mode='inline', debug=True)